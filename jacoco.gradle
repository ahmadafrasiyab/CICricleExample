apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.9"
}
def coverageSourceDirs = [
        'src/main/java',
        'src/debug/java'
]

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

final def task = task jacocoTestReport(type : JacocoReport, dependsOn : ['testDebugUnitTest']) {
    group       = 'Reporting'
    description = 'Generate JaCoCo coverage reports'

    reports {
        xml.enabled  = true
        html.enabled = true
    }

    final def tree = classDirectories = fileTree(
            dir      : 'build/intermediates/javac/debug/classes/com/example',
            excludes : [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*RealmProxy.*',
                    '**/*ColumnInfo.*',
                    '**/*RealmModule*.*',
                    '**/AutoValue_*.*',
                    '**/Dagger*.*',
                    '**/*Module_Provide*Factory.*',
                    '**/*_Factory.*',
                    '**/*_MembersInjector.*',
                    '**/*_LifecycleAdapter.*',
                    '**/models/**'
            ]
    )
    tree

    final def collection = sourceDirectories = files(coverageSourceDirs)
    collection
    executionData     = fileTree(
            dir     : "$buildDir",
            include : [ 'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec' ]
    )

    doFirst {
        files('build/intermediates/javac/debug/classes/com/example').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
task

task jacocoTestReportLocal(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = 'Reporting'
    description = 'Generate JaCoCo coverage reports'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    final def tree = classDirectories = fileTree(
            dir: 'build/intermediates/javac/debug/classes/com/example',
            excludes: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*RealmProxy.*',
                    '**/*ColumnInfo.*',
                    '**/*RealmModule*.*',
                    '**/AutoValue_*.*',
                    '**/Dagger*.*',
                    '**/*Module_Provide*Factory.*',
                    '**/*_Factory.*',
                    '**/*_MembersInjector.*',
                    '**/*_LifecycleAdapter.*',
                    '**/models/**'
            ]
    )
    tree

    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(
            dir: "$buildDir",
            include: ['jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec']
    )

    doFirst {
        files('build/intermediates/javac/debug/classes/com/example').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}